(***************************************************************************
 *                                                                         *
 *  Formal Verification of TLS 1.3 Full Handshake Protocol Using ProVerif  *
 *                                                                         *
 *  Kenichi Arai                                                           *
 *                                                                         *
 *  Copyright (C) Nagasaki University 2015-2016                            *
 *                                                                         *
 ***************************************************************************)

(*
    This file is free software; you can redistribute it and/or modify 
    it under the terms of the BSD License.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the BSD license for more details (in file LICENSEBSD).
*)

(* 
The Transport Layer Security (TLS) Protocol Version 1.3 
    draft-ietf-tls-tls13-11 (January 22, 2016)

===================================================================================
       Client                                                   Server

Key  / ClientHello
Exch \  + key_share              -------->
                                                           ServerHello  \ Key
                                                           + key_share  / Exch
                                                 {EncryptedExtensions}  ^
                                                 {CertificateRequest*}  | Server
                                                {ServerConfiguration*}  v Params
                                                        {Certificate*}  ^
                                                  {CertificateVerify*}  | Auth
                                 <--------                  {Finished}  v
     ^ {Certificate*}
Auth | {CertificateVerify*}
     v {Finished}                -------->
       [Application Data]        <------->         [Application Data]


              + Indicates extensions sent in the
                previously noted message.

              * Indicates optional or situation-dependent
                messages that are not always sent.

              {} Indicates messages protected using keys
                 derived from the ephemeral secret.

              [] Indicates messages protected using keys
                 derived from the master secret.
===================================================================================

             Message flow for full TLS Handshake
*)

free c: channel.

(* Hash *)
fun H(bitstring): bitstring.

(* Signature *)
fun sign(bitstring, bitstring): bitstring.
fun pk(bitstring): bitstring.
  reduc forall x: bitstring, sk: bitstring; verify(sign(x, sk), x, pk(sk)) = true.

(* Symmetric key encryption *)

fun senc(bitstring, bitstring): bitstring.
reduc forall m: bitstring, k: bitstring; sdec(senc(m,k),k) = m.


(* Asymmetric key encryption *)

fun aenc(bitstring, bitstring): bitstring.
reduc forall m: bitstring, sk: bitstring; adec(aenc(m,pk(sk)),sk) = m.


(* Host Information *)
free HostInfoC, HostInfoS, HostInfoCA: bitstring.

(* CP certificate *)
free HostInfoCP:bitstring [private].



(******************************************************************)
(* Queries: secrecy *) 
free AppData: bitstring [private].
query attacker(AppData). 

(* Queries: authentication *) 
event endClient(bitstring, bitstring, bitstring).
event beginClient(bitstring, bitstring, bitstring).
query s: bitstring, t: bitstring, u: bitstring; 
  event(endClient(s, t, u)) ==> event(beginClient(s, t, u)).


(******************************************************************)
(* Client process *)

let processClient(pkCA: bitstring)=
    (* Setup *)
      in(c, (client_version: bitstring, client_cipher_suites: bitstring));

    (* Client Hello*)
      new client_random: bitstring;
      let client_hello = (client_version, client_random, client_cipher_suites) in

    (* Client output *)
      out(c, client_hello);

    (* Client input *)
      in(c, server_proxy_hello: bitstring);
      let (server_version: bitstring, server_random: bitstring, server_cipher_suite: bitstring, server_certificate: bitstring) = server_proxy_hello in

      if server_version = client_version && server_cipher_suite = client_cipher_suites then

      let (=HostInfoCA, =HostInfoS, pkS: bitstring, signCA_pkS: bitstring) = server_certificate in 
      if verify(signCA_pkS, H((HostInfoCA, HostInfoS, pkS)), pkCA) = true then

      new pre_masterkey: bitstring;

      (* Hash used to generate masterkey *)
      let masterkey = H((client_random, server_random, pre_masterkey)) in 

      let enc_client_finished = aenc(pre_masterkey, pkS) in

    (* Client output *)
      out(c, enc_client_finished);

    (* Event end: authentication *)
      in(c, enc_server_finished: bitstring);
      let server_masterkey = adec(enc_server_finished, pkS) in
      if server_masterkey = masterkey then event endClient(client_random, server_random, masterkey);

    (* Application Data *) (* Secrecy *)
      out(c, senc(AppData, masterkey)).

(******************************************************************)
(* Proxy process *)
let processProxy(skP: bitstring, pkP: bitstring, pkCA: bitstring, CP_certificate: bitstring)=
    (* Setup *)
      in(c, (proxy_version: bitstring, proxy_cipher_suite: bitstring));

    (* Proxy input *)
      in(c, client_hello: bitstring);
      let (client_version: bitstring, client_random: bitstring, client_cipher_suites: bitstring) = client_hello in

    (* Proxy output *)
      let client_proxy_hello = (client_version, client_random, client_cipher_suites, pkP) in
      out(c, client_proxy_hello);

    (* Proxy input *)
      in(c, server_hello: bitstring);
      let (server_version: bitstring, server_random: bitstring, server_cipher_suite: bitstring, server_certificate: bitstring, enc_session_key: bitstring) = server_hello in
      let session_key = adec(enc_session_key, skP) in

      let (=HostInfoCA, =HostInfoS, pkS: bitstring, signCA_pkS: bitstring) = server_certificate in 
      if verify(signCA_pkS, H((HostInfoCA, HostInfoS, pkS)), pkCA) = true then

      if server_certificate = CP_certificate then

    (* Proxy output *)
      let server_proxy_hello = (server_version, server_random, server_cipher_suite, server_certificate) in
      out(c, server_proxy_hello);

    (* Proxy input *)
      in(c, enc_client_finished: bitstring);

    (* Proxy output *)
      new proxy_random: bitstring;
      let enc_proxy_random = aenc(proxy_random, pkS) in
      let client_proxy_finished = (enc_client_finished) in 
      out(c, client_proxy_finished).


(******************************************************************)
(* Server process *)

let processServer(skS: bitstring, pkS: bitstring, server_certificate: bitstring, pkCA: bitstring)=
    (* Setup *)
      in(c, (server_version: bitstring, server_cipher_suite: bitstring));

    (* Server input *)
      in(c, client_proxy_hello: bitstring);
      let (client_version: bitstring, client_random: bitstring, client_cipher_suites: bitstring, pkP: bitstring) = client_proxy_hello in

      if client_version = server_version && client_cipher_suites = server_cipher_suite then

    (* ServerHello , session key*)
      new server_random: bitstring;
      new session_key: bitstring;
      let enc_session_key = aenc(session_key, pkP) in
      let server_hello = (server_version, server_random, server_cipher_suite, server_certificate, enc_session_key) in

    (* Server output *)
      out(c, server_hello);

    (* Server input*)
      in(c, client_proxy_finished: bitstring);
      let pre_masterkey = adec(client_proxy_finished, skS) in

      (* Hash used to generate masterkey *)
      let masterkey = H((client_random, server_random, pre_masterkey)) in

    (* Server output *)
      let enc_server_finished = adec(masterkey, skS) in
      out(c, enc_server_finished);
      (* Event begin: authentication *)
      event beginClient(client_random, server_random, masterkey);

    (* Application Data *) (* Secrecy *)
      in(c, enc_data: bitstring).

(******************************************************************)
(* Certificate Authority (CA) process *)

let processCA(skCA: bitstring) =
      in(c, (HostInfoX: bitstring, pkX: bitstring));
      if HostInfoX <> HostInfoC && 
         HostInfoX <> HostInfoS &&
         HostInfoX <> HostInfoCA then 
      let signCA_pkX = sign(H((HostInfoCA, HostInfoX, pkX)), skCA) in 
      let X_certificate = (HostInfoCA, HostInfoX, pkX, signCA_pkX) in
      out(c, X_certificate).


(******************************************************************)
(* Main process *)

process
    (* Certificate Authority (CA) : skCA, pkCA *)
      new skCA: bitstring;
      let pkCA = pk(skCA) in
      out(c, pkCA);
    (* Server key : skS, pkS *)
      new skS: bitstring;
      let pkS = pk(skS) in
    (* CP key : skCP, pkCP *)
      new skCP: bitstring;
      let pkCP = pk(skCP) in
    (* Proxy key : skS, pkS *)
      new skP: bitstring;
      let pkP = pk(skP) in 
    (* (Server) Certificate *)
      let signCA_pkS = sign(H((HostInfoCA, HostInfoS, pkS)), skCA) in 
      let server_certificate = (HostInfoCA, HostInfoS, pkS, signCA_pkS) in
    (* (CP) Certificate *)
      let signCA_pkCP = sign(H((HostInfoCA, HostInfoCP, pkCP)), skCA) in 
      let CP_certificate = (HostInfoCA, HostInfoCP, pkCP, signCA_pkCP) in

    ((!processClient(pkCA)) |
     (!processProxy(skP, pkP, pkCA, CP_certificate)) |
     (!processServer(skS, pkS, server_certificate, pkCA)) |
     (!processCA(skCA))
    )


(******************************************************************)
(* end of file *)
type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Pitptree.ident)
  | ATIDENT of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | BARRIER
  | AMONG
  | WEAKSECRET
  | PARAM
  | ORTEXT
  | FAIL
  | GREATER
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LBRACE
  | RBRACE
  | PROOF
  | EQUIVALENCE
  | OTHERWISE
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

# 117 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  273 (* REPL *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* EQUAL *);
  278 (* FUN *);
  279 (* EQUATION *);
  280 (* REDUCTION *);
  281 (* PREDICATE *);
  282 (* PROCESS *);
  283 (* SLASH *);
  284 (* DOT *);
    0 (* EOF *);
  285 (* LET *);
  286 (* QUERY *);
  287 (* BEFORE *);
  288 (* PUTBEGIN *);
  289 (* NONINTERF *);
  290 (* EVENT *);
  291 (* NOT *);
  292 (* ELIMTRUE *);
  293 (* FREE *);
  294 (* SUCHTHAT *);
  295 (* CLAUSES *);
  296 (* RED *);
  297 (* EQUIV *);
  298 (* EQUIVEQ *);
  299 (* WEDGE *);
  300 (* DIFF *);
  301 (* COLON *);
  302 (* NOUNIF *);
  303 (* PHASE *);
  304 (* BARRIER *);
  305 (* AMONG *);
  306 (* WEAKSECRET *);
  307 (* PARAM *);
  308 (* ORTEXT *);
  309 (* FAIL *);
  310 (* GREATER *);
  311 (* TYPE *);
  312 (* SET *);
  313 (* FORALL *);
  314 (* CONST *);
  315 (* INJEVENT *);
  316 (* OR *);
  317 (* CHANNEL *);
  318 (* LETFUN *);
  319 (* DEFINE *);
  320 (* EXPAND *);
  321 (* YIELD *);
  322 (* LEQ *);
  323 (* PROBA *);
  324 (* LBRACE *);
  325 (* RBRACE *);
  326 (* PROOF *);
  327 (* EQUIVALENCE *);
  328 (* OTHERWISE *);
  329 (* TABLE *);
  330 (* INSERT *);
  331 (* GET *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* ATIDENT *);
  271 (* STRING *);
  272 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\025\000\025\000\020\000\020\000\005\000\005\000\010\000\010\000\
\026\000\026\000\026\000\015\000\015\000\027\000\027\000\007\000\
\007\000\006\000\006\000\028\000\028\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\030\000\
\030\000\029\000\029\000\031\000\031\000\018\000\018\000\017\000\
\017\000\032\000\032\000\032\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\035\000\035\000\
\033\000\033\000\036\000\036\000\036\000\036\000\034\000\034\000\
\016\000\016\000\016\000\016\000\039\000\039\000\040\000\040\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\042\000\042\000\038\000\038\000\043\000\043\000\043\000\043\000\
\041\000\041\000\044\000\044\000\021\000\021\000\013\000\013\000\
\045\000\045\000\046\000\046\000\008\000\008\000\009\000\009\000\
\011\000\011\000\047\000\047\000\047\000\047\000\023\000\023\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\049\000\049\000\053\000\053\000\050\000\050\000\051\000\051\000\
\051\000\051\000\051\000\054\000\054\000\052\000\052\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\055\000\
\055\000\048\000\048\000\056\000\056\000\057\000\057\000\003\000\
\003\000\003\000\004\000\004\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\005\000\010\000\012\000\005\000\007\000\005\000\004\000\007\000\
\008\000\005\000\007\000\006\000\009\000\006\000\009\000\006\000\
\006\000\006\000\006\000\004\000\006\000\004\000\006\000\004\000\
\004\000\006\000\004\000\005\000\004\000\005\000\006\000\004\000\
\004\000\007\000\003\000\009\000\007\000\000\000\004\000\005\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\003\000\003\000\000\000\003\000\001\000\
\000\000\002\000\003\000\005\000\003\000\003\000\000\000\001\000\
\001\000\001\000\000\000\003\000\001\000\001\000\004\000\006\000\
\001\000\003\000\003\000\004\000\003\000\003\000\003\000\003\000\
\001\000\001\000\000\000\005\000\001\000\003\000\001\000\003\000\
\001\000\001\000\004\000\004\000\004\000\001\000\006\000\006\000\
\003\000\003\000\004\000\003\000\003\000\006\000\004\000\004\000\
\004\000\003\000\003\000\005\000\002\000\006\000\003\000\001\000\
\001\000\000\000\006\000\004\000\005\000\003\000\001\000\000\000\
\006\000\006\000\002\000\006\000\002\000\000\000\002\000\000\000\
\004\000\006\000\001\000\003\000\005\000\002\000\002\000\006\000\
\003\000\001\000\001\000\000\000\006\000\004\000\005\000\003\000\
\001\000\000\000\003\000\005\000\003\000\001\000\001\000\000\000\
\003\000\000\000\006\000\005\000\005\000\004\000\006\000\004\000\
\004\000\006\000\003\000\001\000\003\000\003\000\004\000\003\000\
\003\000\001\000\004\000\002\000\005\000\001\000\001\000\006\000\
\005\000\007\000\007\000\004\000\007\000\004\000\007\000\006\000\
\007\000\009\000\003\000\007\000\004\000\003\000\003\000\006\000\
\002\000\000\000\002\000\000\000\002\000\000\000\001\000\003\000\
\003\000\004\000\002\000\003\000\001\000\001\000\000\000\004\000\
\006\000\001\000\003\000\003\000\004\000\003\000\003\000\007\000\
\004\000\006\000\006\000\008\000\006\000\008\000\003\000\003\000\
\001\000\001\000\000\000\001\000\001\000\003\000\003\000\000\000\
\001\000\003\000\003\000\001\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\237\000\000\000\
\238\000\228\000\229\000\239\000\000\000\000\000\000\000\240\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\113\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\123\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\048\000\041\000\042\000\043\000\
\047\000\045\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\000\
\000\000\000\000\000\000\175\000\000\000\000\000\000\000\000\000\
\000\000\231\000\234\000\235\000\064\000\065\000\000\000\000\000\
\066\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\151\000\000\000\000\000\000\000\107\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\098\000\000\000\
\088\000\000\000\000\000\000\000\024\000\086\000\000\000\007\000\
\000\000\027\000\000\000\000\000\079\000\000\000\000\000\000\000\
\000\000\000\000\032\000\000\000\075\000\000\000\149\000\055\000\
\000\000\153\000\000\000\000\000\000\000\000\000\168\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\139\000\
\127\000\000\000\000\000\000\000\000\000\020\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\172\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\000\000\053\000\006\000\000\000\
\004\000\000\000\000\000\010\000\000\000\000\000\000\000\111\000\
\000\000\000\000\000\000\119\000\000\000\000\000\000\000\091\000\
\092\000\103\000\099\000\104\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\000\071\000\000\000\076\000\000\000\
\000\000\000\000\000\000\000\000\167\000\000\000\135\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\226\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\052\000\000\000\169\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\206\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\190\000\
\000\000\191\000\000\000\000\000\000\000\040\000\000\000\068\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\108\000\000\000\060\000\000\000\000\000\021\000\084\000\023\000\
\000\000\026\000\000\000\148\000\031\000\000\000\000\000\132\000\
\000\000\000\000\000\000\137\000\000\000\000\000\000\000\000\000\
\019\000\016\000\017\000\018\000\000\000\000\000\000\000\000\000\
\223\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\212\000\000\000\000\000\000\000\000\000\058\000\
\000\000\000\000\000\000\000\000\171\000\000\000\000\000\000\000\
\000\000\201\000\000\000\000\000\000\000\000\000\000\000\189\000\
\000\000\000\000\000\000\000\000\000\000\162\000\159\000\000\000\
\000\000\102\000\000\000\000\000\095\000\000\000\096\000\008\000\
\072\000\034\000\000\000\000\000\000\000\000\000\145\000\129\000\
\000\000\125\000\122\000\121\000\124\000\005\000\000\000\000\000\
\224\000\000\000\208\000\000\000\000\000\000\000\213\000\000\000\
\037\000\011\000\059\000\000\000\000\000\000\000\173\000\000\000\
\177\000\200\000\204\000\202\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\133\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\176\000\000\000\000\000\000\000\
\000\000\000\000\000\000\192\000\184\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\117\000\000\000\130\000\000\000\
\000\000\136\000\015\000\209\000\000\000\000\000\000\000\000\000\
\036\000\179\000\178\000\183\000\181\000\188\000\000\000\000\000\
\185\000\000\000\000\000\002\000\115\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\
\000\000\186\000\003\000\000\000\141\000\000\000\157\000\000\000\
\000\000\000\000\000\000\155\000"

let yydgoto = "\005\000\
\031\000\032\000\036\000\040\000\109\000\223\000\224\000\105\002\
\045\000\079\000\043\000\215\000\234\000\153\001\059\000\087\000\
\060\000\065\000\120\000\196\000\235\000\150\000\081\000\197\000\
\198\000\174\001\044\000\225\000\151\000\152\000\066\000\062\000\
\121\000\107\001\122\000\108\001\038\001\039\001\230\001\172\000\
\038\002\040\001\039\002\077\000\082\000\151\002\169\000\154\001\
\192\001\065\002\181\001\182\001\104\002\183\001\155\001\037\000\
\038\000"

let yysindex = "\217\002\
\163\005\163\005\108\255\037\255\000\000\102\255\140\255\140\255\
\218\255\223\255\039\255\037\000\042\000\186\255\171\001\102\000\
\161\255\019\255\110\000\102\000\118\000\128\000\102\000\102\000\
\132\000\160\000\167\000\171\000\120\255\190\000\000\000\004\255\
\000\000\000\000\000\000\000\000\232\255\101\000\103\000\000\000\
\194\000\197\000\209\000\213\001\209\000\213\001\185\000\022\000\
\229\000\218\000\232\000\034\255\237\000\158\255\220\000\251\000\
\001\001\016\001\230\000\254\000\208\004\018\001\184\255\036\001\
\022\001\038\001\181\255\046\001\158\004\060\001\213\001\110\255\
\042\001\000\000\070\001\032\001\086\001\090\001\053\001\095\001\
\163\005\213\001\032\255\130\001\099\001\115\001\089\001\135\001\
\209\000\209\000\137\001\120\001\138\001\079\000\165\001\166\001\
\161\001\125\001\186\001\059\005\059\005\108\255\108\255\037\255\
\015\255\156\001\196\001\102\000\179\001\206\001\108\001\183\001\
\221\003\015\255\184\001\095\001\059\005\218\000\212\001\057\255\
\220\001\000\000\221\001\218\000\015\255\210\001\189\001\194\001\
\218\000\218\000\218\000\218\000\052\255\163\005\218\000\218\000\
\218\000\218\000\218\000\052\255\242\001\234\001\163\005\234\001\
\015\255\163\005\218\000\163\005\213\001\088\255\246\001\000\000\
\213\001\015\255\213\001\213\001\213\001\163\005\213\001\213\001\
\213\001\095\001\102\000\015\255\207\001\247\001\000\000\011\003\
\226\255\105\003\239\001\000\000\236\001\105\003\026\255\163\005\
\163\005\232\001\233\001\060\000\015\255\163\005\095\001\239\005\
\015\255\015\255\163\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\195\001\125\001\254\001\015\255\059\005\
\255\001\007\002\009\002\010\002\000\000\092\005\239\005\115\000\
\002\002\003\002\004\002\000\000\008\002\012\002\009\000\026\005\
\232\255\000\000\000\000\000\000\000\000\000\000\023\002\038\002\
\000\000\000\000\026\002\163\005\213\001\163\005\213\001\040\002\
\163\005\041\002\000\000\195\255\162\255\218\000\000\000\029\000\
\044\002\047\002\218\000\102\000\102\000\049\002\235\000\056\002\
\013\001\048\002\000\000\031\002\037\004\203\255\000\000\037\004\
\000\000\213\001\028\002\050\002\000\000\000\000\074\002\000\000\
\099\005\000\000\205\255\213\001\000\000\077\002\035\002\099\000\
\137\002\039\002\000\000\014\000\000\000\064\004\000\000\000\000\
\209\000\000\000\213\001\213\001\213\001\161\255\000\000\082\002\
\078\002\105\003\083\002\091\002\084\002\095\002\097\002\000\000\
\000\000\105\003\098\002\200\255\076\002\000\000\000\000\163\005\
\163\005\080\002\096\002\100\002\209\000\000\000\106\002\110\002\
\239\005\116\002\128\002\239\005\115\000\129\002\038\005\132\002\
\139\002\000\000\163\005\000\000\125\001\150\002\253\255\153\002\
\239\005\239\005\239\005\023\255\000\000\046\004\065\001\131\255\
\239\005\123\002\141\002\000\001\162\002\068\001\170\002\174\002\
\059\005\000\000\016\000\134\002\015\255\000\000\000\000\060\255\
\000\000\175\255\209\000\000\000\164\002\163\005\218\000\000\000\
\165\002\171\002\181\002\000\000\142\002\197\000\111\001\000\000\
\000\000\000\000\000\000\000\000\143\002\163\005\188\002\163\005\
\173\002\163\005\213\001\000\000\000\000\149\002\000\000\163\005\
\175\002\064\004\064\004\064\004\000\000\105\003\000\000\199\002\
\186\002\105\003\184\002\105\003\167\002\210\002\167\002\163\005\
\000\000\000\000\163\005\163\005\163\005\201\002\211\002\239\005\
\207\255\228\002\000\000\153\002\239\005\004\005\197\002\219\002\
\239\005\239\005\163\005\239\005\239\005\239\005\176\002\218\002\
\000\000\000\000\221\002\000\000\059\255\193\002\001\000\086\000\
\246\002\239\002\059\005\150\255\250\002\249\002\000\000\065\001\
\015\255\155\001\239\005\239\005\239\005\162\002\059\005\000\000\
\245\002\000\000\239\005\065\001\251\002\000\000\015\255\000\000\
\140\255\140\255\232\002\059\005\000\000\040\001\218\000\001\003\
\000\000\000\003\000\000\218\000\009\003\000\000\000\000\000\000\
\163\005\000\000\044\001\000\000\000\000\163\005\025\003\000\000\
\034\000\024\003\105\003\000\000\018\003\014\003\026\255\014\003\
\000\000\000\000\000\000\000\000\163\005\239\005\144\000\239\005\
\000\000\254\002\033\003\239\005\239\005\239\005\169\000\003\003\
\000\000\134\000\000\000\035\005\163\005\163\005\163\005\000\000\
\038\003\015\255\239\005\065\001\000\000\059\005\097\000\015\255\
\065\001\000\000\041\003\047\002\104\001\030\002\043\003\000\000\
\251\002\066\003\054\003\069\003\188\255\000\000\000\000\163\005\
\236\255\000\000\160\005\218\000\000\000\208\004\000\000\000\000\
\000\000\000\000\105\003\057\003\059\003\072\003\000\000\000\000\
\070\003\000\000\000\000\000\000\000\000\000\000\195\005\239\005\
\000\000\015\255\000\000\113\001\113\002\187\002\000\000\015\003\
\000\000\000\000\000\000\162\002\037\001\078\003\000\000\059\005\
\000\000\000\000\000\000\000\000\059\005\059\005\153\002\162\002\
\162\002\045\255\161\255\064\003\000\000\163\005\029\000\201\005\
\097\003\105\003\087\003\000\000\105\003\163\005\153\001\102\003\
\239\005\239\005\239\005\163\005\000\000\162\002\162\002\251\002\
\097\000\097\000\162\002\000\000\000\000\059\005\239\005\092\003\
\209\000\213\001\163\005\000\000\000\000\029\000\000\000\111\003\
\105\003\000\000\000\000\000\000\239\005\035\005\230\003\095\004\
\000\000\000\000\000\000\000\000\000\000\000\000\251\002\183\003\
\000\000\093\003\101\005\000\000\000\000\034\000\119\003\035\005\
\239\005\239\005\092\003\163\005\213\001\000\000\034\000\035\005\
\035\005\000\000\000\000\130\255\000\000\161\255\000\000\213\001\
\210\005\213\001\130\255\000\000"

let yyrindex = "\000\000\
\009\255\129\004\130\004\000\000\000\000\000\000\005\002\005\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\131\004\135\004\000\000\
\000\000\000\000\108\003\000\000\108\003\000\000\108\003\000\000\
\000\000\132\003\000\000\153\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\234\255\110\003\197\255\000\000\
\000\000\113\003\000\000\000\000\000\000\000\000\139\003\207\005\
\000\000\000\000\000\000\000\000\116\000\189\002\000\000\000\000\
\003\000\000\000\128\003\000\000\000\000\000\000\000\000\000\000\
\108\003\108\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\130\004\000\000\
\152\003\000\000\000\000\000\000\000\000\108\005\000\000\000\000\
\000\000\152\003\000\000\156\003\000\000\000\000\163\002\161\003\
\000\000\000\000\236\002\132\003\000\000\000\000\000\000\000\000\
\132\003\000\000\132\003\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
\152\003\003\000\000\000\003\000\000\000\162\003\000\000\000\000\
\139\003\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\170\003\000\000\000\000\000\000\170\003\000\000\003\000\
\003\000\000\000\000\000\000\000\000\000\003\000\156\003\000\000\
\152\003\152\003\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\255\089\003\152\003\000\000\
\000\000\000\000\000\000\160\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\174\003\
\000\000\000\000\000\000\003\000\000\000\003\000\000\000\000\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\178\003\
\000\000\121\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\170\255\030\003\151\000\000\000\239\000\
\000\000\000\000\197\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\211\000\000\000\
\000\000\082\003\000\000\165\004\000\000\229\004\000\000\000\000\
\108\003\000\000\000\000\000\000\000\000\088\002\000\000\000\000\
\000\000\170\003\000\000\080\005\000\000\181\003\000\000\000\000\
\000\000\000\000\000\000\128\003\000\000\000\000\000\000\003\000\
\003\000\000\000\000\000\000\000\108\003\000\000\000\000\000\000\
\182\003\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\145\003\
\000\000\000\000\182\003\160\003\000\000\000\000\186\003\171\003\
\000\000\000\000\000\000\085\003\135\003\135\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\096\255\
\000\000\100\255\108\003\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\209\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\151\005\003\000\000\000\003\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\003\000\
\000\000\068\000\073\000\084\000\000\000\000\000\000\000\000\000\
\253\005\170\003\000\000\000\000\241\000\000\000\241\000\003\000\
\000\000\000\000\003\000\003\000\003\000\000\000\000\000\000\000\
\188\003\000\000\000\000\145\003\182\003\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\001\193\003\000\000\000\000\186\003\
\000\000\096\001\000\000\000\000\182\003\135\003\000\000\000\000\
\000\000\000\000\182\003\186\003\020\001\000\000\000\000\000\000\
\005\002\005\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\194\003\000\000\000\000\000\000\000\000\128\003\000\000\128\003\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\102\001\
\000\000\189\000\000\000\175\001\133\003\003\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\249\004\000\000\
\000\000\000\000\000\000\112\000\228\003\250\003\000\000\000\000\
\044\004\000\000\000\000\000\000\108\003\000\000\000\000\003\000\
\000\000\000\000\196\003\000\000\000\000\024\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\135\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\135\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\003\135\003\
\135\003\066\004\088\002\000\000\000\000\003\000\000\000\198\003\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\003\000\000\000\135\003\135\003\116\004\
\249\004\249\004\135\003\000\000\000\000\000\000\000\000\149\004\
\108\003\000\000\003\000\000\000\000\000\000\000\000\000\199\003\
\000\000\000\000\000\000\000\000\000\000\225\001\208\002\002\003\
\000\000\000\000\000\000\000\000\000\000\000\000\199\004\066\004\
\000\000\000\000\000\000\000\000\000\000\000\000\204\003\019\002\
\000\000\000\000\149\004\003\000\000\000\000\000\000\000\052\002\
\102\002\000\000\000\000\056\000\000\000\088\002\000\000\000\000\
\000\000\000\000\075\000\000\000"

let yygindex = "\000\000\
\000\000\004\000\112\004\113\004\213\255\165\255\136\255\000\000\
\017\003\251\255\019\003\163\255\039\004\182\255\255\255\095\255\
\174\255\017\002\031\000\154\003\010\000\241\255\201\003\000\000\
\027\004\182\254\249\255\136\003\075\004\124\255\000\000\000\000\
\052\001\000\000\009\004\017\254\240\254\103\255\116\003\226\000\
\000\000\131\003\242\253\000\000\203\253\117\002\000\000\218\254\
\067\255\222\253\055\255\209\255\152\002\012\003\042\003\184\004\
\186\004"

let yytablesize = 1810
let yytable = "\076\000\
\046\000\112\000\038\000\115\000\242\000\033\000\083\001\216\000\
\090\001\190\001\064\000\230\000\068\000\045\001\089\000\198\001\
\086\000\092\000\093\000\210\000\043\001\106\002\232\000\236\000\
\075\000\142\001\075\001\221\000\111\000\100\000\113\000\083\000\
\049\000\015\001\038\000\170\000\177\001\124\000\044\001\049\000\
\107\000\061\000\050\000\025\001\069\000\178\000\179\000\084\000\
\051\000\039\000\250\000\052\000\049\000\007\001\084\000\050\000\
\102\002\001\001\171\000\238\000\053\001\051\000\124\002\125\002\
\119\000\000\002\168\000\053\000\201\001\129\002\054\000\078\000\
\055\000\056\000\101\000\222\000\125\000\135\000\125\000\038\000\
\053\000\242\001\103\002\054\000\167\000\055\000\056\000\136\000\
\178\001\166\000\012\001\085\000\049\000\064\001\065\001\109\002\
\152\002\057\000\085\000\137\000\138\000\161\000\227\000\160\000\
\146\002\160\000\071\001\070\001\157\000\063\001\057\000\058\000\
\077\001\153\000\041\000\160\001\139\000\223\001\243\001\142\002\
\034\000\035\000\091\001\161\000\058\000\119\001\133\002\160\000\
\149\002\061\000\159\000\160\000\078\001\011\001\184\001\124\001\
\136\001\251\000\074\000\016\001\017\001\018\001\074\000\020\001\
\021\001\022\001\005\001\161\000\237\000\008\001\015\002\010\001\
\194\001\184\001\154\000\074\000\019\002\024\001\061\000\074\000\
\247\000\019\001\249\000\061\000\103\001\252\000\253\000\254\000\
\255\000\000\001\061\000\023\001\097\000\160\000\097\000\185\001\
\097\000\009\001\097\000\046\001\047\001\097\000\135\000\202\001\
\145\000\054\001\049\000\098\000\215\000\050\000\066\001\127\000\
\136\000\108\000\008\002\051\000\042\000\097\000\052\000\085\000\
\097\000\150\002\089\001\170\000\137\000\138\000\082\001\123\001\
\146\000\240\001\041\002\075\002\097\000\096\001\053\000\098\001\
\128\000\080\000\160\000\055\000\056\000\139\000\102\001\135\000\
\085\000\157\000\171\000\162\001\125\000\097\000\047\000\095\001\
\141\000\097\001\030\001\048\000\100\001\129\001\112\001\113\001\
\226\001\158\001\090\000\089\001\057\000\137\000\138\000\159\000\
\160\000\164\001\165\001\197\001\099\002\031\001\175\001\176\001\
\016\002\172\001\058\000\003\002\089\001\090\000\186\001\078\002\
\161\000\150\001\166\001\130\001\131\001\132\001\164\000\102\000\
\089\001\111\001\081\002\187\000\230\000\162\001\210\000\089\001\
\210\000\116\000\210\000\210\000\038\000\210\000\210\000\210\000\
\210\000\164\000\157\000\210\000\210\000\210\000\210\000\210\000\
\210\000\105\001\117\000\164\001\165\001\106\001\036\002\210\000\
\210\000\063\000\037\002\145\001\146\001\210\000\067\000\203\001\
\159\000\160\000\062\002\159\001\166\001\158\000\210\000\210\000\
\012\002\112\002\210\000\210\000\114\002\044\002\169\001\038\000\
\050\001\038\000\051\001\052\001\163\000\239\001\021\002\210\000\
\156\000\165\000\183\000\158\000\210\000\007\002\247\001\248\001\
\004\002\250\001\251\001\252\001\166\000\210\000\210\000\163\000\
\135\002\017\002\074\000\184\000\165\000\211\000\156\000\127\001\
\089\001\205\001\162\001\219\001\211\001\103\000\025\002\166\000\
\013\002\014\002\078\000\074\000\064\002\074\000\079\001\157\000\
\150\000\214\001\088\000\216\001\150\000\218\001\093\002\080\001\
\164\001\165\001\090\000\221\001\200\000\206\001\074\000\081\001\
\011\002\060\002\100\002\101\002\091\000\159\000\160\000\066\002\
\094\000\166\001\048\002\233\001\020\002\061\000\234\001\235\001\
\236\001\101\000\162\001\101\000\104\000\101\000\161\000\101\000\
\122\002\123\002\101\000\047\002\162\001\126\002\249\001\001\002\
\063\002\052\002\053\002\054\002\095\000\055\002\214\000\241\000\
\164\001\165\001\101\000\096\000\246\000\101\000\248\000\097\000\
\061\002\088\002\164\001\165\001\114\000\162\001\108\000\215\000\
\215\000\215\000\046\000\215\000\215\000\105\000\215\000\215\000\
\215\000\215\000\099\000\166\001\215\000\215\000\215\000\215\000\
\215\000\106\000\101\000\164\001\165\001\147\000\108\000\147\000\
\215\000\215\000\049\000\147\000\032\002\050\000\215\000\129\000\
\218\000\034\002\096\002\051\000\166\001\087\002\119\000\097\002\
\098\002\076\002\118\000\215\000\215\000\027\002\133\000\115\001\
\046\002\100\000\030\002\100\000\123\000\100\000\053\000\100\000\
\215\000\126\000\100\000\055\000\056\000\215\000\130\000\135\000\
\056\002\057\002\058\002\189\001\131\000\173\001\215\000\215\000\
\127\002\136\000\100\000\126\000\126\000\100\000\118\002\119\002\
\120\002\117\001\216\000\132\000\057\000\137\000\138\000\187\000\
\187\000\134\000\140\000\077\002\128\002\187\000\187\000\187\000\
\187\000\135\000\058\000\187\000\187\000\187\000\139\000\187\000\
\144\000\094\002\136\002\136\000\142\000\155\000\026\002\187\000\
\187\000\143\000\033\002\222\000\157\000\187\000\147\000\137\000\
\138\000\162\001\080\002\158\000\135\000\130\002\144\002\145\002\
\157\000\149\000\187\000\187\000\079\001\199\000\136\000\199\000\
\139\000\193\001\159\000\160\000\191\001\180\001\156\000\164\001\
\165\001\108\002\137\000\138\000\187\000\081\001\159\000\160\000\
\162\000\115\002\131\002\161\000\163\000\187\000\187\000\121\002\
\166\001\164\000\203\000\139\000\203\000\220\000\174\000\161\000\
\211\000\211\000\211\000\165\000\211\000\211\000\132\002\211\000\
\211\000\211\000\211\000\069\002\176\000\211\000\211\000\211\000\
\211\000\211\000\212\001\175\000\162\001\148\002\188\000\189\000\
\229\000\211\000\211\000\135\000\089\002\162\001\217\000\211\000\
\153\002\190\000\155\002\191\000\192\000\136\000\173\000\147\002\
\211\000\193\000\164\001\165\001\211\000\211\000\159\000\160\000\
\194\000\137\000\138\000\164\001\165\001\180\000\004\001\116\002\
\006\001\211\000\177\000\166\001\181\000\182\000\211\000\161\000\
\185\000\186\000\139\000\070\000\166\001\162\001\071\000\211\000\
\211\000\214\000\214\000\214\000\195\000\214\000\214\000\072\000\
\214\000\214\000\214\000\214\000\187\000\199\000\214\000\214\000\
\214\000\214\000\214\000\164\001\165\001\164\001\165\001\043\002\
\125\000\045\002\214\000\214\000\226\000\073\000\228\000\221\000\
\214\000\153\000\230\000\233\000\166\001\070\000\166\001\124\000\
\071\000\001\000\002\000\003\000\004\000\214\000\214\000\074\000\
\239\000\110\000\240\000\218\000\218\000\218\000\243\000\218\000\
\218\000\244\000\218\000\218\000\218\000\218\000\245\000\214\000\
\218\000\218\000\218\000\218\000\218\000\002\001\003\001\073\000\
\214\000\214\000\013\001\154\000\218\000\218\000\041\001\026\001\
\042\001\219\000\218\000\048\001\049\001\063\000\069\001\067\001\
\063\000\074\000\073\001\072\001\074\001\075\001\084\001\218\000\
\218\000\063\000\085\001\086\001\087\001\216\000\216\000\216\000\
\088\001\216\000\216\000\092\001\216\000\216\000\216\000\216\000\
\094\001\218\000\216\000\216\000\216\000\216\000\216\000\063\000\
\093\001\070\002\218\000\218\000\099\001\101\001\216\000\216\000\
\109\001\110\001\162\001\057\000\216\000\114\001\222\000\222\000\
\222\000\063\000\222\000\222\000\116\001\222\000\222\000\222\000\
\222\000\216\000\216\000\222\000\222\000\222\000\222\000\222\000\
\164\001\165\001\138\000\118\001\141\000\120\001\121\001\222\000\
\222\000\125\001\160\000\216\000\057\000\222\000\126\001\134\001\
\154\000\166\001\135\001\154\000\216\000\216\000\138\001\137\001\
\139\001\140\001\222\000\222\000\154\000\141\001\143\001\144\001\
\220\000\220\000\220\000\147\001\220\000\220\000\151\001\220\000\
\220\000\220\000\220\000\152\001\222\000\220\000\220\000\220\000\
\220\000\220\000\154\000\148\001\090\002\222\000\222\000\149\001\
\156\001\220\000\220\000\157\001\161\001\162\001\194\000\220\000\
\167\001\217\000\217\000\217\000\154\000\217\000\217\000\168\001\
\217\000\217\000\217\000\217\000\220\000\220\000\217\000\217\000\
\217\000\217\000\171\001\164\001\165\001\157\000\173\001\170\000\
\187\001\188\001\217\000\217\000\128\001\094\000\220\000\094\000\
\217\000\094\000\191\001\094\000\166\001\195\001\094\000\220\000\
\220\000\196\001\199\001\159\000\160\000\217\000\217\000\094\000\
\204\001\207\001\208\001\209\001\210\001\213\001\094\000\225\001\
\215\001\094\000\056\000\056\000\161\000\056\000\091\002\217\000\
\217\001\220\001\222\001\224\001\227\001\094\000\094\000\162\001\
\217\000\217\000\221\000\221\000\221\000\229\001\221\000\221\000\
\056\000\221\000\221\000\221\000\221\000\231\001\094\000\221\000\
\221\000\221\000\221\000\182\000\237\001\164\001\165\001\238\001\
\241\001\056\000\245\001\221\000\221\000\002\002\109\000\246\001\
\109\000\221\000\109\000\253\001\109\000\254\001\166\001\109\000\
\255\001\180\000\005\002\006\002\009\002\010\002\221\000\221\000\
\109\000\018\002\089\001\024\002\219\000\219\000\219\000\109\000\
\219\000\219\000\109\000\219\000\219\000\219\000\219\000\029\002\
\221\000\219\000\219\000\219\000\219\000\028\002\109\000\109\000\
\031\002\221\000\221\000\035\002\040\002\219\000\219\000\157\000\
\106\000\042\002\106\000\219\000\106\000\051\002\106\000\109\000\
\171\000\106\000\050\002\193\000\059\002\068\002\165\001\071\002\
\219\000\219\000\027\001\028\001\029\001\159\000\160\000\057\000\
\057\000\106\000\073\002\057\000\057\000\057\000\057\000\057\000\
\057\000\196\000\219\000\057\000\057\000\057\000\161\000\057\000\
\072\002\074\002\083\002\219\000\219\000\082\002\084\002\057\000\
\057\000\085\002\095\002\092\002\074\000\057\000\074\000\074\000\
\074\000\057\000\074\000\107\002\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\111\002\
\057\000\032\001\033\001\113\002\034\001\074\000\117\002\064\002\
\057\000\057\000\035\001\197\000\057\000\036\001\057\000\134\002\
\140\002\074\000\074\000\074\000\074\000\057\000\057\000\143\002\
\038\000\232\000\233\000\057\000\057\000\037\001\236\000\054\000\
\114\000\089\000\194\000\194\000\087\000\074\000\194\000\083\000\
\194\000\194\000\194\000\194\000\198\000\057\000\194\000\194\000\
\194\000\074\000\194\000\128\000\067\000\051\000\057\000\057\000\
\152\000\094\000\194\000\194\000\170\000\112\000\081\000\170\000\
\194\000\170\000\170\000\170\000\170\000\094\000\140\000\170\000\
\170\000\170\000\069\000\170\000\094\000\194\000\194\000\094\000\
\120\000\138\000\227\000\170\000\170\000\057\000\207\000\199\000\
\225\000\170\000\102\002\094\000\094\000\205\000\195\000\194\000\
\146\000\038\000\118\000\162\001\116\000\144\000\170\000\170\000\
\194\000\194\000\142\000\093\000\094\000\093\000\219\000\093\000\
\220\000\093\000\023\002\022\002\093\000\055\001\170\001\068\001\
\170\000\164\001\165\001\014\001\200\001\093\000\133\001\182\000\
\182\000\170\000\170\000\182\000\093\000\182\000\182\000\093\000\
\182\000\231\000\166\001\182\000\182\000\182\000\104\001\182\000\
\198\000\137\002\162\001\093\000\093\000\180\000\180\000\182\000\
\182\000\180\000\232\001\180\000\180\000\182\000\180\000\159\000\
\160\000\180\000\180\000\180\000\093\000\180\000\228\001\156\002\
\164\001\165\001\182\000\182\000\067\002\180\000\180\000\139\002\
\161\000\049\002\110\000\180\000\110\000\217\000\110\000\218\000\
\110\000\166\001\000\000\110\000\182\000\000\000\000\000\000\000\
\180\000\180\000\000\000\000\000\000\000\182\000\182\000\193\000\
\193\000\000\000\000\000\110\000\000\000\193\000\193\000\193\000\
\193\000\135\000\180\000\193\000\193\000\193\000\000\000\193\000\
\179\001\000\000\162\001\180\000\180\000\196\000\196\000\193\000\
\193\000\196\000\000\000\196\000\196\000\193\000\196\000\137\000\
\138\000\196\000\196\000\196\000\157\000\196\000\000\000\000\000\
\164\001\165\001\193\000\193\000\000\000\196\000\196\000\000\000\
\139\000\000\000\000\000\196\000\000\000\000\000\000\000\000\000\
\000\000\166\001\159\000\160\000\193\000\000\000\000\000\000\000\
\196\000\196\000\138\002\162\001\000\000\193\000\193\000\197\000\
\197\000\000\000\000\000\161\000\000\000\197\000\197\000\197\000\
\197\000\000\000\196\000\197\000\197\000\197\000\000\000\197\000\
\000\000\164\001\165\001\196\000\196\000\000\000\000\000\197\000\
\197\000\000\000\000\000\000\000\000\000\197\000\000\000\000\000\
\198\000\198\000\166\001\000\000\198\000\000\000\198\000\198\000\
\198\000\198\000\197\000\197\000\198\000\198\000\198\000\078\000\
\000\000\078\000\078\000\078\000\000\000\078\000\000\000\000\000\
\198\000\198\000\135\000\000\000\197\000\000\000\198\000\000\000\
\000\000\148\000\000\000\000\000\136\000\197\000\197\000\000\000\
\078\000\000\000\000\000\198\000\198\000\000\000\000\000\000\000\
\137\000\138\000\195\000\195\000\078\000\078\000\078\000\000\000\
\195\000\195\000\195\000\195\000\000\000\198\000\195\000\195\000\
\195\000\139\000\195\000\000\000\000\000\000\000\198\000\198\000\
\078\000\000\000\195\000\195\000\135\000\000\000\000\000\077\000\
\195\000\077\000\077\000\077\000\078\000\077\000\136\000\000\000\
\000\000\000\000\000\000\000\000\000\000\195\000\195\000\000\000\
\000\000\000\000\137\000\138\000\198\000\198\000\000\000\000\000\
\077\000\000\000\198\000\198\000\198\000\198\000\000\000\195\000\
\198\000\198\000\198\000\139\000\077\000\077\000\077\000\000\000\
\195\000\195\000\000\000\000\000\198\000\198\000\244\001\000\000\
\162\001\000\000\198\000\000\000\000\000\200\000\000\000\000\000\
\000\000\089\001\000\000\201\000\202\000\203\000\204\000\198\000\
\198\000\205\000\206\000\207\000\077\000\000\000\164\001\165\001\
\000\000\000\000\000\000\000\000\000\000\000\000\208\000\162\001\
\000\000\198\000\162\001\209\000\000\000\000\000\200\000\166\001\
\000\000\163\001\198\000\198\000\201\000\202\000\203\000\204\000\
\210\000\211\000\205\000\206\000\207\000\164\001\165\001\000\000\
\164\001\165\001\131\000\000\000\131\000\000\000\131\000\208\000\
\131\000\000\000\212\000\131\000\209\000\000\000\166\001\200\000\
\000\000\166\001\000\000\213\000\214\000\201\000\202\000\203\000\
\076\001\210\000\211\000\205\000\206\000\207\000\073\000\000\000\
\073\000\073\000\073\000\000\000\073\000\000\000\000\000\135\000\
\208\000\141\002\000\000\212\000\000\000\209\000\122\001\000\000\
\073\000\136\000\000\000\000\000\213\000\214\000\000\000\073\000\
\000\000\000\000\210\000\211\000\000\000\137\000\138\000\159\000\
\160\000\000\000\000\000\073\000\073\000\073\000\073\000\073\000\
\000\000\105\000\000\000\105\000\212\000\105\000\139\000\105\000\
\161\000\000\000\105\000\000\000\000\000\213\000\214\000\073\000\
\079\002\000\000\000\000\105\000\000\000\000\000\000\000\000\000\
\000\000\000\000\105\000\073\000\135\000\105\000\000\000\000\000\
\006\000\007\000\008\000\009\000\000\000\000\000\136\000\010\000\
\011\000\105\000\105\000\012\000\013\000\014\000\015\000\016\000\
\000\000\017\000\137\000\138\000\000\000\000\000\000\000\000\000\
\018\000\110\002\105\000\000\000\019\000\020\000\000\000\162\001\
\000\000\021\000\022\000\139\000\023\000\135\000\086\002\024\000\
\025\000\026\000\027\000\073\000\000\000\028\000\154\002\136\000\
\029\000\000\000\073\000\030\000\000\000\164\001\165\001\056\001\
\000\000\000\000\057\001\137\000\138\000\000\000\000\000\000\000\
\058\001\073\000\073\000\059\001\159\000\160\000\166\001\134\000\
\060\001\134\000\000\000\134\000\139\000\134\000\000\000\000\000\
\134\000\000\000\073\000\061\001\000\000\161\000\000\000\000\000\
\000\000\062\001"

let yycheck = "\015\000\
\008\000\045\000\000\000\047\000\125\000\002\000\208\000\101\000\
\000\000\084\001\012\000\000\000\014\000\175\000\020\000\000\000\
\018\000\023\000\024\000\000\000\174\000\075\002\114\000\117\000\
\015\000\042\001\004\001\013\001\044\000\026\001\046\000\013\001\
\009\001\154\000\026\001\004\001\075\001\004\001\013\001\001\001\
\042\000\011\000\004\001\164\000\014\000\089\000\090\000\029\001\
\010\001\013\001\133\000\013\001\001\001\145\000\029\001\004\001\
\012\001\140\000\027\001\003\001\181\000\010\001\097\002\098\002\
\013\001\007\001\082\000\029\001\009\001\104\002\032\001\013\001\
\034\001\035\001\071\001\061\001\045\001\021\001\045\001\071\001\
\029\001\156\001\038\001\032\001\081\000\034\001\035\001\031\001\
\066\001\080\000\003\001\073\001\069\001\185\000\186\000\079\002\
\150\002\059\001\073\001\043\001\044\001\006\001\108\000\044\001\
\139\002\006\001\200\000\199\000\021\001\184\000\059\001\073\001\
\206\000\004\001\013\001\061\001\060\001\134\001\157\001\134\002\
\013\001\014\001\216\000\028\001\073\001\002\001\110\002\028\001\
\143\002\009\001\043\001\044\001\207\000\149\000\004\001\012\001\
\034\001\134\000\043\001\155\000\156\000\157\000\043\001\159\000\
\160\000\161\000\143\000\060\001\118\000\146\000\189\001\148\000\
\086\001\004\001\045\001\060\001\195\001\163\000\038\001\060\001\
\130\000\158\000\132\000\133\000\003\001\135\000\136\000\137\000\
\138\000\139\000\140\000\162\000\003\001\044\001\005\001\045\001\
\007\001\147\000\009\001\176\000\177\000\012\001\021\001\009\001\
\004\001\182\000\001\001\068\001\000\000\004\001\187\000\034\001\
\031\001\006\001\045\001\010\001\057\001\028\001\013\001\003\001\
\031\001\072\001\008\001\004\001\043\001\044\001\208\000\003\001\
\028\001\003\001\227\001\024\001\043\001\229\000\029\001\231\000\
\059\001\057\001\044\001\034\001\035\001\060\001\028\001\021\001\
\028\001\021\001\027\001\021\001\045\001\060\001\013\001\228\000\
\049\001\230\000\009\001\013\001\233\000\025\001\244\000\245\000\
\138\001\060\001\009\001\008\001\059\001\043\001\044\001\043\001\
\044\001\043\001\044\001\089\001\071\002\028\001\073\001\074\001\
\190\001\005\001\073\001\003\001\008\001\028\001\081\001\028\001\
\060\001\053\001\060\001\027\001\028\001\029\001\009\001\040\001\
\008\001\243\000\035\002\000\000\009\001\021\001\003\001\008\001\
\005\001\004\001\007\001\008\001\026\001\010\001\011\001\012\001\
\013\001\028\001\021\001\016\001\017\001\018\001\019\001\020\001\
\021\001\013\001\021\001\043\001\044\001\017\001\013\001\028\001\
\029\001\013\001\017\001\048\001\049\001\034\001\013\001\099\001\
\043\001\044\001\004\002\061\001\060\001\006\001\043\001\044\001\
\185\001\082\002\047\001\048\001\085\002\231\001\067\001\069\001\
\013\001\071\001\015\001\016\001\009\001\152\001\199\001\060\001\
\006\001\009\001\004\001\028\001\065\001\179\001\161\001\162\001\
\003\001\164\001\165\001\166\001\009\001\074\001\075\001\028\001\
\113\002\191\001\043\001\021\001\028\001\000\000\028\001\005\001\
\008\001\102\001\021\001\123\001\110\001\009\001\204\001\028\001\
\187\001\188\001\013\001\060\001\020\001\043\001\004\001\021\001\
\005\001\118\001\013\001\120\001\009\001\122\001\060\002\013\001\
\043\001\044\001\013\001\128\001\021\001\103\001\060\001\021\001\
\184\001\002\002\072\002\073\002\013\001\043\001\044\001\008\002\
\013\001\060\001\003\001\144\001\196\001\038\001\147\001\148\001\
\149\001\003\001\021\001\005\001\054\001\007\001\060\001\009\001\
\094\002\095\002\012\001\238\001\021\001\099\002\163\001\173\001\
\006\002\244\001\245\001\246\001\013\001\005\001\000\000\124\000\
\043\001\044\001\028\001\013\001\129\000\031\001\131\000\013\001\
\003\002\050\002\043\001\044\001\004\001\021\001\006\001\003\001\
\004\001\005\001\202\001\007\001\008\001\004\001\010\001\011\001\
\012\001\013\001\013\001\060\001\016\001\017\001\018\001\019\001\
\020\001\013\001\060\001\043\001\044\001\003\001\006\001\005\001\
\028\001\029\001\001\001\009\001\217\001\004\001\034\001\004\001\
\000\000\222\001\064\002\010\001\060\001\048\002\013\001\069\002\
\070\002\021\002\006\001\047\001\048\001\207\001\009\001\005\001\
\237\001\003\001\212\001\005\001\013\001\007\001\029\001\009\001\
\060\001\013\001\012\001\034\001\035\001\065\001\004\001\021\001\
\253\001\254\001\255\001\004\001\004\001\006\001\074\001\075\001\
\102\002\031\001\028\001\027\001\028\001\031\001\089\002\090\002\
\091\002\005\001\000\000\004\001\059\001\043\001\044\001\004\001\
\005\001\028\001\009\001\024\002\103\002\010\001\011\001\012\001\
\013\001\021\001\073\001\016\001\017\001\018\001\060\001\020\001\
\003\001\005\001\117\002\031\001\009\001\004\001\007\001\028\001\
\029\001\028\001\007\001\000\000\021\001\034\001\009\001\043\001\
\044\001\021\001\028\002\028\001\021\001\105\002\137\002\138\002\
\021\001\006\001\047\001\048\001\004\001\003\001\031\001\005\001\
\060\001\006\001\043\001\044\001\009\001\013\001\009\001\043\001\
\044\001\078\002\043\001\044\001\065\001\021\001\043\001\044\001\
\003\001\086\002\106\002\060\001\003\001\074\001\075\001\092\002\
\060\001\045\001\003\001\060\001\005\001\000\000\004\001\060\001\
\003\001\004\001\005\001\013\001\007\001\008\001\107\002\010\001\
\011\001\012\001\013\001\012\001\028\001\016\001\017\001\018\001\
\019\001\020\001\012\001\009\001\021\001\141\002\002\001\003\001\
\021\001\028\001\029\001\021\001\020\001\021\001\000\000\034\001\
\152\002\013\001\154\002\015\001\016\001\031\001\013\001\140\002\
\043\001\021\001\043\001\044\001\047\001\048\001\043\001\044\001\
\028\001\043\001\044\001\043\001\044\001\021\001\142\000\007\001\
\144\000\060\001\028\001\060\001\045\001\028\001\065\001\060\001\
\004\001\004\001\060\001\001\001\060\001\021\001\004\001\074\001\
\075\001\003\001\004\001\005\001\056\001\007\001\008\001\013\001\
\010\001\011\001\012\001\013\001\028\001\004\001\016\001\017\001\
\018\001\019\001\020\001\043\001\044\001\043\001\044\001\230\001\
\045\001\232\001\028\001\029\001\009\001\035\001\028\001\000\000\
\034\001\004\001\028\001\028\001\060\001\001\001\060\001\004\001\
\004\001\001\000\002\000\003\000\004\000\047\001\048\001\053\001\
\005\001\013\001\006\001\003\001\004\001\005\001\021\001\007\001\
\008\001\045\001\010\001\011\001\012\001\013\001\045\001\065\001\
\016\001\017\001\018\001\019\001\020\001\004\001\013\001\035\001\
\074\001\075\001\005\001\045\001\028\001\029\001\016\001\009\001\
\021\001\000\000\034\001\028\001\028\001\001\001\009\001\069\001\
\004\001\053\001\004\001\013\001\004\001\004\001\013\001\047\001\
\048\001\013\001\016\001\016\001\013\001\003\001\004\001\005\001\
\013\001\007\001\008\001\005\001\010\001\011\001\012\001\013\001\
\007\001\065\001\016\001\017\001\018\001\019\001\020\001\035\001\
\003\001\012\001\074\001\075\001\005\001\005\001\028\001\029\001\
\005\001\003\001\021\001\000\000\034\001\005\001\003\001\004\001\
\005\001\053\001\007\001\008\001\005\001\010\001\011\001\012\001\
\013\001\047\001\048\001\016\001\017\001\018\001\019\001\020\001\
\043\001\044\001\044\001\028\001\049\001\028\001\005\001\028\001\
\029\001\005\001\044\001\065\001\000\000\034\001\052\001\006\001\
\001\001\060\001\013\001\004\001\074\001\075\001\004\001\013\001\
\013\001\003\001\047\001\048\001\013\001\005\001\005\001\028\001\
\003\001\004\001\005\001\028\001\007\001\008\001\005\001\010\001\
\011\001\012\001\013\001\006\001\065\001\016\001\017\001\018\001\
\019\001\020\001\035\001\028\001\012\001\074\001\075\001\028\001\
\013\001\028\001\029\001\004\001\004\001\021\001\000\000\034\001\
\005\001\003\001\004\001\005\001\053\001\007\001\008\001\005\001\
\010\001\011\001\012\001\013\001\047\001\048\001\016\001\017\001\
\018\001\019\001\005\001\043\001\044\001\021\001\006\001\000\000\
\038\001\021\001\028\001\029\001\028\001\003\001\065\001\005\001\
\034\001\007\001\009\001\009\001\060\001\004\001\012\001\074\001\
\075\001\004\001\045\001\043\001\044\001\047\001\048\001\021\001\
\021\001\021\001\016\001\007\001\047\001\047\001\028\001\006\001\
\005\001\031\001\006\001\007\001\060\001\009\001\012\001\065\001\
\028\001\053\001\028\001\005\001\021\001\043\001\044\001\021\001\
\074\001\075\001\003\001\004\001\005\001\047\001\007\001\008\001\
\028\001\010\001\011\001\012\001\013\001\012\001\060\001\016\001\
\017\001\018\001\019\001\000\000\028\001\043\001\044\001\021\001\
\005\001\045\001\038\001\028\001\029\001\045\001\003\001\021\001\
\005\001\034\001\007\001\068\001\009\001\028\001\060\001\012\001\
\028\001\000\000\005\001\013\001\003\001\005\001\047\001\048\001\
\021\001\013\001\008\001\028\001\003\001\004\001\005\001\028\001\
\007\001\008\001\031\001\010\001\011\001\012\001\013\001\016\001\
\065\001\016\001\017\001\018\001\019\001\021\001\043\001\044\001\
\016\001\074\001\075\001\003\001\005\001\028\001\029\001\021\001\
\003\001\016\001\005\001\034\001\007\001\005\001\009\001\060\001\
\027\001\012\001\045\001\000\000\007\001\005\001\044\001\005\001\
\047\001\048\001\040\001\041\001\042\001\043\001\044\001\004\001\
\005\001\028\001\005\001\008\001\009\001\010\001\011\001\012\001\
\013\001\000\000\065\001\016\001\017\001\018\001\060\001\020\001\
\007\001\005\001\016\001\074\001\075\001\021\001\007\001\028\001\
\029\001\012\001\005\001\069\001\003\001\034\001\005\001\006\001\
\007\001\005\001\009\001\028\001\008\001\009\001\010\001\011\001\
\012\001\013\001\047\001\048\001\016\001\017\001\018\001\007\001\
\020\001\001\001\002\001\021\001\004\001\028\001\009\001\020\001\
\028\001\029\001\010\001\000\000\065\001\013\001\034\001\009\001\
\028\001\040\001\041\001\042\001\043\001\074\001\075\001\009\001\
\000\000\000\000\000\000\047\001\048\001\029\001\000\000\028\001\
\005\001\028\001\004\001\005\001\028\001\060\001\008\001\005\001\
\010\001\011\001\012\001\013\001\000\000\065\001\016\001\017\001\
\018\001\072\001\020\001\028\001\005\001\069\001\074\001\075\001\
\005\001\009\001\028\001\029\001\005\001\005\001\005\001\008\001\
\034\001\010\001\011\001\012\001\013\001\021\001\005\001\016\001\
\017\001\018\001\005\001\020\001\028\001\047\001\048\001\031\001\
\007\001\005\001\005\001\028\001\029\001\045\001\005\001\021\001\
\005\001\034\001\012\001\043\001\044\001\005\001\000\000\065\001\
\007\001\069\001\007\001\021\001\007\001\007\001\047\001\048\001\
\074\001\075\001\007\001\003\001\060\001\005\001\103\000\007\001\
\104\000\009\001\202\001\201\001\012\001\183\000\069\001\197\000\
\065\001\043\001\044\001\153\000\093\001\021\001\030\001\004\001\
\005\001\074\001\075\001\008\001\028\001\010\001\011\001\031\001\
\013\001\021\001\060\001\016\001\017\001\018\001\238\000\020\001\
\000\000\020\001\021\001\043\001\044\001\004\001\005\001\028\001\
\029\001\008\001\143\001\010\001\011\001\034\001\013\001\043\001\
\044\001\016\001\017\001\018\001\060\001\020\001\140\001\155\002\
\043\001\044\001\047\001\048\001\009\002\028\001\029\001\128\002\
\060\001\240\001\003\001\034\001\005\001\102\000\007\001\102\000\
\009\001\060\001\255\255\012\001\065\001\255\255\255\255\255\255\
\047\001\048\001\255\255\255\255\255\255\074\001\075\001\004\001\
\005\001\255\255\255\255\028\001\255\255\010\001\011\001\012\001\
\013\001\021\001\065\001\016\001\017\001\018\001\255\255\020\001\
\019\001\255\255\021\001\074\001\075\001\004\001\005\001\028\001\
\029\001\008\001\255\255\010\001\011\001\034\001\013\001\043\001\
\044\001\016\001\017\001\018\001\021\001\020\001\255\255\255\255\
\043\001\044\001\047\001\048\001\255\255\028\001\029\001\255\255\
\060\001\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\060\001\043\001\044\001\065\001\255\255\255\255\255\255\
\047\001\048\001\020\001\021\001\255\255\074\001\075\001\004\001\
\005\001\255\255\255\255\060\001\255\255\010\001\011\001\012\001\
\013\001\255\255\065\001\016\001\017\001\018\001\255\255\020\001\
\255\255\043\001\044\001\074\001\075\001\255\255\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\034\001\255\255\255\255\
\004\001\005\001\060\001\255\255\008\001\255\255\010\001\011\001\
\012\001\013\001\047\001\048\001\016\001\017\001\018\001\003\001\
\255\255\005\001\006\001\007\001\255\255\009\001\255\255\255\255\
\028\001\029\001\021\001\255\255\065\001\255\255\034\001\255\255\
\255\255\028\001\255\255\255\255\031\001\074\001\075\001\255\255\
\028\001\255\255\255\255\047\001\048\001\255\255\255\255\255\255\
\043\001\044\001\004\001\005\001\040\001\041\001\042\001\255\255\
\010\001\011\001\012\001\013\001\255\255\065\001\016\001\017\001\
\018\001\060\001\020\001\255\255\255\255\255\255\074\001\075\001\
\060\001\255\255\028\001\029\001\021\001\255\255\255\255\003\001\
\034\001\005\001\006\001\007\001\072\001\009\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\048\001\255\255\
\255\255\255\255\043\001\044\001\004\001\005\001\255\255\255\255\
\028\001\255\255\010\001\011\001\012\001\013\001\255\255\065\001\
\016\001\017\001\018\001\060\001\040\001\041\001\042\001\255\255\
\074\001\075\001\255\255\255\255\028\001\029\001\019\001\255\255\
\021\001\255\255\034\001\255\255\255\255\004\001\255\255\255\255\
\255\255\008\001\255\255\010\001\011\001\012\001\013\001\047\001\
\048\001\016\001\017\001\018\001\072\001\255\255\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\021\001\
\255\255\065\001\021\001\034\001\255\255\255\255\004\001\060\001\
\255\255\028\001\074\001\075\001\010\001\011\001\012\001\013\001\
\047\001\048\001\016\001\017\001\018\001\043\001\044\001\255\255\
\043\001\044\001\003\001\255\255\005\001\255\255\007\001\029\001\
\009\001\255\255\065\001\012\001\034\001\255\255\060\001\004\001\
\255\255\060\001\255\255\074\001\075\001\010\001\011\001\012\001\
\013\001\047\001\048\001\016\001\017\001\018\001\003\001\255\255\
\005\001\006\001\007\001\255\255\009\001\255\255\255\255\021\001\
\029\001\021\001\255\255\065\001\255\255\034\001\028\001\255\255\
\021\001\031\001\255\255\255\255\074\001\075\001\255\255\028\001\
\255\255\255\255\047\001\048\001\255\255\043\001\044\001\043\001\
\044\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\255\255\003\001\255\255\005\001\065\001\007\001\060\001\009\001\
\060\001\255\255\012\001\255\255\255\255\074\001\075\001\060\001\
\009\001\255\255\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\072\001\021\001\031\001\255\255\255\255\
\022\001\023\001\024\001\025\001\255\255\255\255\031\001\029\001\
\030\001\043\001\044\001\033\001\034\001\035\001\036\001\037\001\
\255\255\039\001\043\001\044\001\255\255\255\255\255\255\255\255\
\046\001\009\001\060\001\255\255\050\001\051\001\255\255\021\001\
\255\255\055\001\056\001\060\001\058\001\021\001\028\001\061\001\
\062\001\063\001\064\001\021\001\255\255\067\001\021\001\031\001\
\070\001\255\255\028\001\073\001\255\255\043\001\044\001\001\001\
\255\255\255\255\004\001\043\001\044\001\255\255\255\255\255\255\
\010\001\043\001\044\001\013\001\043\001\044\001\060\001\003\001\
\018\001\005\001\255\255\007\001\060\001\009\001\255\255\255\255\
\012\001\255\255\060\001\029\001\255\255\060\001\255\255\255\255\
\255\255\035\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  BARRIER\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  ORTEXT\000\
  FAIL\000\
  GREATER\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  EQUIVALENCE\000\
  OTHERWISE\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  ATIDENT\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 146 "pitparser.mly"
        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 1094 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 150 "pitparser.mly"
 ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 1105 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'typeid) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'treducmayfail) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 153 "pitparser.mly"
 ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )
# 1117 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 156 "pitparser.mly"
 ( (TReduc(_2,_3)) :: _5 )
# 1126 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 159 "pitparser.mly"
        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 1136 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'eqlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 161 "pitparser.mly"
 ( (TEquation(_2, _3)) :: _5 )
# 1145 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 163 "pitparser.mly"
        ( (TEventDecl(_2, [])) :: _4 )
# 1153 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 165 "pitparser.mly"
        ( (TEventDecl(_2, _4)) :: _7 )
# 1162 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 167 "pitparser.mly"
        ( (TPredDecl(_2, _4, _6)) :: _8 )
# 1172 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 169 "pitparser.mly"
        ( (TPredDecl(_2, [], _3)) :: _5 )
# 1181 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 171 "pitparser.mly"
        ( (TTableDecl(_2, _4)) :: _7 )
# 1190 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 173 "pitparser.mly"
 ( (TPDef(_2,[],_4)) :: _6 )
# 1199 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 175 "pitparser.mly"
        ( (TPDef(_2,_4,_7)) :: _9 )
# 1209 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 177 "pitparser.mly"
        ( (TLetFun(_2,[],_4)) :: _6 )
# 1218 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 179 "pitparser.mly"
        ( (TLetFun(_2,_4,_7)) :: _9 )
# 1228 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 181 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1237 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 183 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1246 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 185 "pitparser.mly"
        ( (TSet(_2,I _4)) :: _6 )
# 1255 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 187 "pitparser.mly"
        ( (TNoUnif (_2, _4)) :: _6 )
# 1264 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 189 "pitparser.mly"
        ( (TNoUnif ([], _2)) :: _4 )
# 1272 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 191 "pitparser.mly"
        ( (TQuery(_2,_4)) :: _6 )
# 1281 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 193 "pitparser.mly"
        ( (TQuery([],_2)) :: _4 )
# 1289 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 195 "pitparser.mly"
        ( (TNoninterf(_2, _4)) :: _6 )
# 1298 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 197 "pitparser.mly"
        ( (TNoninterf([], _2)) :: _4 )
# 1306 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 199 "pitparser.mly"
        ( (TWeaksecret(_2)) :: _4 )
# 1314 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 201 "pitparser.mly"
 ( (TNot(_2, _4)) :: _6 )
# 1323 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 203 "pitparser.mly"
 ( (TNot([], _2)) :: _4 )
# 1331 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 205 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1341 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 208 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1350 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 211 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1359 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nemayfailvartypeseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 214 "pitparser.mly"
        ( (TElimtrue (_2,_4)) :: _6 )
# 1368 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 216 "pitparser.mly"
        ( (TElimtrue ([],_2)) :: _4 )
# 1376 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 218 "pitparser.mly"
        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 1388 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 224 "pitparser.mly"
        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 1398 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 226 "pitparser.mly"
        ( (TClauses(_2)) :: _3 )
# 1406 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 228 "pitparser.mly"
        ( (TDefine(_2, _4, _7)) :: _9 )
# 1416 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 230 "pitparser.mly"
        ( (TExpand(_2, _4)) :: _7 )
# 1425 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "pitparser.mly"
        ( [] )
# 1431 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 236 "pitparser.mly"
 ( _1, _3, None )
# 1439 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 238 "pitparser.mly"
 ( 
	  Param.equivalence := true;
	  _1, _3, Some _4 )
# 1450 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 246 "pitparser.mly"
        ( _1 )
# 1457 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 248 "pitparser.mly"
        ( _1 )
# 1464 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 250 "pitparser.mly"
        ( string_of_int _1, parse_extent() )
# 1471 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "pitparser.mly"
        ( "*", parse_extent() )
# 1477 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "pitparser.mly"
        ( ".", parse_extent() )
# 1483 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "pitparser.mly"
        ( "set", parse_extent() )
# 1489 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "pitparser.mly"
        ( "=", parse_extent() )
# 1495 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 260 "pitparser.mly"
        ( ",", parse_extent() )
# 1501 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 264 "pitparser.mly"
        ( [_1] )
# 1508 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 266 "pitparser.mly"
        ( _1 :: _2 )
# 1516 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 270 "pitparser.mly"
 ( [_1] )
# 1523 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 272 "pitparser.mly"
        ( _1 :: _3 )
# 1531 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 278 "pitparser.mly"
        ( _2 )
# 1538 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "pitparser.mly"
        ( [] )
# 1544 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 284 "pitparser.mly"
    ( _1 :: _3 )
# 1552 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 286 "pitparser.mly"
    ( [_1] )
# 1559 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "pitparser.mly"
    ( None )
# 1565 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "pitparser.mly"
    ( Some [] )
# 1571 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 294 "pitparser.mly"
    ( Some (_2) )
# 1578 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 298 "pitparser.mly"
        ( (_1,_3)::_5 )
# 1587 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 301 "pitparser.mly"
        ( [(_1,_3)] )
# 1595 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 305 "pitparser.mly"
        ( _2 )
# 1602 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 307 "pitparser.mly"
        ( [] )
# 1608 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 311 "pitparser.mly"
        ( _1 )
# 1615 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 313 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 1622 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 318 "pitparser.mly"
        ( _1 )
# 1629 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "pitparser.mly"
        ( [] )
# 1635 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 324 "pitparser.mly"
    ( _1 :: _3 )
# 1643 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 326 "pitparser.mly"
    ( [_1] )
# 1650 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 332 "pitparser.mly"
 ( PFail, parse_extent () )
# 1656 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 334 "pitparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 1664 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 336 "pitparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1673 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 339 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 1680 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 341 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1688 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 343 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1696 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 345 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1703 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 347 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1711 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 349 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1719 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 351 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 1729 "pitparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 358 "pitparser.mly"
 ( _1 :: _3 )
# 1737 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 360 "pitparser.mly"
 ( [_1] )
# 1744 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 364 "pitparser.mly"
        ( _1 )
# 1751 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 366 "pitparser.mly"
        ( [] )
# 1757 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 372 "pitparser.mly"
    ( (_1, Some _4) )
# 1765 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 374 "pitparser.mly"
    ( (_1, None) )
# 1772 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 378 "pitparser.mly"
    ( _1 :: _3 )
# 1780 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 380 "pitparser.mly"
    ( [_1] )
# 1787 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 386 "pitparser.mly"
    ( _1 :: _3 )
# 1795 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 388 "pitparser.mly"
    ( [_1] )
# 1802 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 392 "pitparser.mly"
    ( PRealQuery(_1) )
# 1809 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 394 "pitparser.mly"
    ( PPutBegin(false, _4) )
# 1816 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 396 "pitparser.mly"
    ( PPutBegin(true, _4) )
# 1823 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 400 "pitparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 1831 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 402 "pitparser.mly"
 ( PGIdent (_1), parse_extent() )
# 1838 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 404 "pitparser.mly"
        ( PGPhase(_1, _3, _6), parse_extent() )
# 1847 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 406 "pitparser.mly"
        ( PGPhase(("table", parse_extent()), [_3], _6), parse_extent() )
# 1855 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 408 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1863 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 410 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1871 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 412 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1878 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 414 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1886 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 416 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1894 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 418 "pitparser.mly"
        ( PGFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1902 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 420 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )
# 1909 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 422 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )
# 1916 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 424 "pitparser.mly"
        ( PGFunApp(("table",parse_extent()), [_3]), parse_extent() )
# 1923 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 426 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )
# 1931 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 428 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 1941 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 433 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 1949 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 435 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 1956 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 437 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 1965 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 441 "pitparser.mly"
 ( _1 :: _3 )
# 1973 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 443 "pitparser.mly"
 ( [_1] )
# 1980 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 447 "pitparser.mly"
        ( _1 )
# 1987 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 449 "pitparser.mly"
        ( [] )
# 1993 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 454 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2002 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 456 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2010 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 458 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2019 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 460 "pitparser.mly"
        ( [(_1, _3)] )
# 2027 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 464 "pitparser.mly"
        ( _1 )
# 2034 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 466 "pitparser.mly"
        ( [] )
# 2040 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 472 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 2049 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 474 "pitparser.mly"
        ( BFNoUnif((_1,_3,_5), _6) )
# 2059 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 476 "pitparser.mly"
        ( BFNoUnif((_1,[],-1),_2) )
# 2067 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 478 "pitparser.mly"
        ( BFNoUnif((("table", parse_extent()),_3,_5), _6) )
# 2076 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 482 "pitparser.mly"
    ( _2 )
# 2083 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 484 "pitparser.mly"
    ( -1 )
# 2089 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 488 "pitparser.mly"
    ( _2 )
# 2096 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 490 "pitparser.mly"
    ( -1 )
# 2102 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 494 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 2110 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 496 "pitparser.mly"
 ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2118 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 498 "pitparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 2125 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 500 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 2135 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 505 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 2143 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 507 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 2150 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 509 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 2157 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 511 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 2166 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 516 "pitparser.mly"
 ( _1 :: _3 )
# 2174 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 518 "pitparser.mly"
 ( [_1] )
# 2181 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 522 "pitparser.mly"
        ( _1 )
# 2188 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 524 "pitparser.mly"
        ( [] )
# 2194 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 529 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2203 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 531 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2211 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 533 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2220 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 535 "pitparser.mly"
        ( [(_1, _3)] )
# 2228 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 539 "pitparser.mly"
        ( _1 )
# 2235 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 541 "pitparser.mly"
        ( [] )
# 2241 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 547 "pitparser.mly"
 ( (_1,_3, false) )
# 2249 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    Obj.repr(
# 550 "pitparser.mly"
 ( (_1,_3, true) )
# 2257 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 554 "pitparser.mly"
 ( _1::_3 )
# 2265 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartype) in
    Obj.repr(
# 557 "pitparser.mly"
 ( [_1] )
# 2272 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 561 "pitparser.mly"
        ( _1 )
# 2279 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 563 "pitparser.mly"
        ( [] )
# 2285 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nemayfailvartypeseq) in
    Obj.repr(
# 567 "pitparser.mly"
 ( _2 )
# 2292 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 569 "pitparser.mly"
 ( [] )
# 2298 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 574 "pitparser.mly"
 ( (_2,_3,_5) :: _6 )
# 2308 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 576 "pitparser.mly"
 ( [_2,_3,_5] )
# 2317 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 580 "pitparser.mly"
 ( (_1,_2,_4) :: _5 )
# 2327 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 582 "pitparser.mly"
 ( [_1,_2,_4] )
# 2336 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 586 "pitparser.mly"
 ( (_1,_2,_4) :: _6 )
# 2346 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 588 "pitparser.mly"
 ( [_1,_2,_4] )
# 2355 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 594 "pitparser.mly"
    ( [(_1, _2, _4)] )
# 2364 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'eqlist) in
    Obj.repr(
# 596 "pitparser.mly"
    ( (_1, _2, _4)::_6 )
# 2374 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 602 "pitparser.mly"
        ( PClause(_1,_3) )
# 2382 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 604 "pitparser.mly"
        ( PFact(_1) )
# 2389 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 606 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 2397 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 608 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 2405 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 612 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 2414 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 614 "pitparser.mly"
 ( [_1,_2] )
# 2422 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 620 "pitparser.mly"
 ( _2 )
# 2429 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 622 "pitparser.mly"
 ( PLetDef (_1,[]) )
# 2436 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 624 "pitparser.mly"
        ( PLetDef (_1, _3) )
# 2444 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 626 "pitparser.mly"
 ( PRepl _2 )
# 2451 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 628 "pitparser.mly"
 ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )
# 2461 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 631 "pitparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 2470 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 635 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )
# 2477 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 638 "pitparser.mly"
 ( PRestr(_2, _3, _5, _6) )
# 2487 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 640 "pitparser.mly"
 ( PTest(_2,_4,_5) )
# 2496 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 642 "pitparser.mly"
 ( PInput(_3,_5,_7) )
# 2505 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 644 "pitparser.mly"
 ( POutput(_3,_5,_7) )
# 2514 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 646 "pitparser.mly"
 ( PLet(_2,_4,PNil,PNil) )
# 2522 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 648 "pitparser.mly"
 ( PLet(_2,_4,_6,_7) )
# 2532 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 650 "pitparser.mly"
        ( PLetFilter(_2,_4,PNil,PNil) )
# 2540 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 652 "pitparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_7) )
# 2552 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 656 "pitparser.mly"
        ( PInsert(_2, _4, _6) )
# 2561 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 658 "pitparser.mly"
        ( PGet(_2, _4, None, _6, _7) )
# 2571 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 660 "pitparser.mly"
        ( PGet(_2, _4, Some _7, _8, _9) )
# 2582 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 662 "pitparser.mly"
 ( PPar(_1,_3) )
# 2590 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 664 "pitparser.mly"
        ( PEvent(_2, _4, _6, _7) )
# 2600 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 666 "pitparser.mly"
        ( PEvent(_2, [], _3, _4) )
# 2609 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 668 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Phases should be positive integers in processes" (parse_extent());
          PPhase(_2, _3) )
# 2619 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 672 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, None, _3) )
# 2630 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 677 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, Some _4, _6) )
# 2642 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 684 "pitparser.mly"
        ( _2 )
# 2649 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 686 "pitparser.mly"
        ( PNil )
# 2655 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 690 "pitparser.mly"
        ( _2 )
# 2662 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 692 "pitparser.mly"
        ( PNil )
# 2668 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 696 "pitparser.mly"
        ( _2 )
# 2675 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 698 "pitparser.mly"
        ( PNil )
# 2681 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 702 "pitparser.mly"
    ( PPatVar(_1, None) )
# 2688 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 704 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 2696 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 706 "pitparser.mly"
    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )
# 2706 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 711 "pitparser.mly"
    ( PPatFunApp(_1,_3) )
# 2714 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 713 "pitparser.mly"
    ( PPatEqual(_2) )
# 2721 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 717 "pitparser.mly"
    ( _1 :: _3 )
# 2729 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 719 "pitparser.mly"
    ( [_1] )
# 2736 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 723 "pitparser.mly"
    ( _1 )
# 2743 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 725 "pitparser.mly"
    ( [] )
# 2749 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 731 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 2757 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 733 "pitparser.mly"
        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2766 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 736 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 2773 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 738 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2781 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 740 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2789 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 742 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2796 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 744 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2804 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 746 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2812 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 748 "pitparser.mly"
 ( PPRestr(_2, _3, _5, _7), parse_extent() )
# 2822 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 750 "pitparser.mly"
 ( PPTest(_2,_4,None), parse_extent() )
# 2830 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 752 "pitparser.mly"
 ( PPTest(_2,_4,Some _6), parse_extent() )
# 2839 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 754 "pitparser.mly"
 ( PPLet(_2,_4,_6,None), parse_extent() )
# 2848 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 756 "pitparser.mly"
 ( PPLet(_2,_4,_6,Some _8), parse_extent() )
# 2858 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 758 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,None), parse_extent() )
# 2867 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 760 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,Some _8), parse_extent() )
# 2877 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 762 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 2887 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 769 "pitparser.mly"
 ( _1 :: _3 )
# 2895 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 771 "pitparser.mly"
 ( [_1] )
# 2902 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 775 "pitparser.mly"
        ( _1 )
# 2909 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 777 "pitparser.mly"
        ( [] )
# 2915 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 783 "pitparser.mly"
    ( _1 )
# 2922 "pitparser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 785 "pitparser.mly"
    ( _1 )
# 2929 "pitparser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 789 "pitparser.mly"
    ( [_1;_3] )
# 2937 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 791 "pitparser.mly"
    ( _1 :: _3 )
# 2945 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    Obj.repr(
# 795 "pitparser.mly"
    ( [] )
# 2951 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 797 "pitparser.mly"
    ( [_1] )
# 2958 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'onepermut) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list list) in
    Obj.repr(
# 799 "pitparser.mly"
    ( _1 :: _3 )
# 2966 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list) in
    Obj.repr(
# 807 "pitparser.mly"
    ( _1 :: _3 )
# 2974 "pitparser.ml"
               : Pitptree.ident list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 809 "pitparser.mly"
    ( [_1] )
# 2981 "pitparser.ml"
               : Pitptree.ident list))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry permut *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry order *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
let permut (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Pitptree.ident list list)
let order (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Pitptree.ident list)
